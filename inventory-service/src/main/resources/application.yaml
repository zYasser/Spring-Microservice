
server:
  port: 0

spring:
  application:
    name: inventory-service
  data:
    mongodb:
      uri: mongodb://backendUser:backendUser@localhost:27017/inventory
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            add:
              type:
                headers: false
    consumer:
      group-id: group-1
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer

      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.value.default.type: com.microservice.inventory_service.dto.OrderDto
        spring.json.trusted.packages: "*"
        spring.json.remove.type.headers: true








eureka:
  ## This will allow us to register multiple instance of same service because since we use 0 as port it going to have duplicate instance id
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${random.value}}

  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/



logging:
  level:
    org.springframework.data.mongodb.core.MongoTemplate: DEBUG
